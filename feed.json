{
    "version": "https://jsonfeed.org/version/1",
    "title": "Yolo",
    "subtitle": "subtitle",
    "icon": "http://www.chlneter.com/images/favicon.ico",
    "description": "个人博客",
    "home_page_url": "http://www.chlneter.com",
    "items": [
        {
            "id": "http://www.chlneter.com/%E5%BC%82%E6%AD%A5/",
            "url": "http://www.chlneter.com/%E5%BC%82%E6%AD%A5/",
            "title": "异步",
            "date_published": "2023-01-11T14:08:34.434Z",
            "content_html": "<h5 id=\"概念\"><a class=\"anchor\" href=\"#概念\">#</a> 概念</h5>\n<h6 id=\"同步与异步\"><a class=\"anchor\" href=\"#同步与异步\">#</a> 同步与异步</h6>\n<ul>\n<li>\n<p>同步：执行完一个任务之后才会执行下一个任务</p>\n</li>\n<li>\n<p>异步：执行一个任务不管是否完成，就开始执行下一个任务，如果任务没有结果则任务完成之后会通过状态、通知、回调告知完成。</p>\n</li>\n<li>\n<p>区别：任务之间是否会等待完成才开始执行。</p>\n</li>\n</ul>\n<h6 id=\"阻塞与非阻塞\"><a class=\"anchor\" href=\"#阻塞与非阻塞\">#</a> 阻塞与非阻塞</h6>\n<ul>\n<li>阻塞：线程挂起，等待某个操作执行完成，期间 CPU 不会分给时间片给该线程，该线程无法执行其他工作。</li>\n<li>非阻塞：就算某个方法没有执行完，线程也会返回。</li>\n<li>区别：调用者是否一直等待结果，期间不执行其他代码。</li>\n</ul>\n<h6 id=\"同步异步与阻塞非阻塞\"><a class=\"anchor\" href=\"#同步异步与阻塞非阻塞\">#</a> 同步异步与阻塞非阻塞</h6>\n<ul>\n<li>区别：\n<ul>\n<li>同步与异步关注的是如何得到结果以及得到结果后如何通知调用者完成</li>\n<li>阻塞与非阻塞关注的是如何等待结果，是线程等待着完成还是先做其他的事情等完成后通知、回调或者轮训状态。</li>\n</ul>\n</li>\n</ul>\n<h5 id=\"异步使用场景\"><a class=\"anchor\" href=\"#异步使用场景\">#</a> 异步使用场景</h5>\n<ul>\n<li>IO 密集型：网络请求数据、数据库访问或者读写文件系统，这一类的操作 CPU 不直接参与，而是需要等待某些事情完成，使用按手印 async/await 并通过 TaskCompletionSource 来实现通知 IO 操作已经完成。</li>\n<li>CPU 密集型：不包含各种 IO 操作</li>\n</ul>\n<h5 id=\"asyncawait关键字\"><a class=\"anchor\" href=\"#asyncawait关键字\">#</a> Async/Await 关键字</h5>\n<ul>\n<li>作用：只是在方法中加入 async 关键字并没有什么作用，只是为了在方法中能够使用 await 关键字。而 await 的作用是，当 Task 任务未完成，会马上返回至调用者，相当于暂停方法的执行，并且在 Task 任务完成之后，根据同步上下文在原线程或者在线程池中挑选一个线程或者创建一个线程获得 Task 返回结果。如果发生异常则在现有的调用栈中重新抛出异常并继续执行后续代码。</li>\n</ul>\n<h5 id=\"反编译代码\"><a class=\"anchor\" href=\"#反编译代码\">#</a> 反编译代码</h5>\n<ul>\n<li>只有 Async，空方法</li>\n</ul>\n<p><code>async的作用就是初始化一个状态机</code></p>\n<figure class=\"highlight csharp\"><figcaption data-lang=\"C#\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">async</span> <span class=\"token return-type class-name\">Task</span> <span class=\"token function\">AsyncTask1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">// 空方法返回 Task</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">// 反编译 IL 进行整理</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">Task</span> <span class=\"token function\">Asyncvoid</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>   <span class=\"token class-name\">AsyncTaskStateMachine1</span> stateMachine <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">AsyncTaskStateMachine1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>   <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>     builder <span class=\"token operator\">=</span> AsyncTaskMethodBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">Create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>     asyncTask <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>     state <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>   <span class=\"token comment\">// 调用 stateMachine.MoveNext () 方法</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>   stateMachine<span class=\"token punctuation\">.</span>builder<span class=\"token punctuation\">.</span><span class=\"token function\">Start</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">ref</span> stateMachine<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>   <span class=\"token keyword\">return</span> stateMachine<span class=\"token punctuation\">.</span>builder<span class=\"token punctuation\">.</span>Task<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token comment\">/// &lt;summary></span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token comment\">/// 状态机</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token comment\">/// 包含 MoveNext 和 SetStateMachine 两个方法</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token comment\">/// &lt;/summary></span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token keyword\">private</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">AsyncTaskStateMachine1</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">IAsyncStateMachine</span></span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> state<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">AsyncTaskMethodBuilder</span> builder<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">AsyncTask</span> asyncTask<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">MoveNext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> num <span class=\"token operator\">=</span> state<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token keyword\">try</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> ex<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>            state <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>            builder<span class=\"token punctuation\">.</span><span class=\"token function\">SetException</span><span class=\"token punctuation\">(</span>ex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>            <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        state <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//-2 状态表示已完成</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>        builder<span class=\"token punctuation\">.</span><span class=\"token function\">SetResult</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 标记为完成状态</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">SetStateMachine</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">IAsyncStateMachine</span> stateMachine<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>    <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> IAsyncStateMachine<span class=\"token punctuation\">.</span><span class=\"token function\">MoveNext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">MoveNext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>    <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> IAsyncStateMachine<span class=\"token punctuation\">.</span><span class=\"token function\">SetStateMachine</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">IAsyncStateMachine</span> stateMachine<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">SetStateMachine</span><span class=\"token punctuation\">(</span>stateMachine<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li>有 Async 和 Await</li>\n</ul>\n<figure class=\"highlight csharp\"><figcaption data-lang=\"C#\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">async</span> <span class=\"token return-type class-name\">Task</span> <span class=\"token function\">AsyncTask2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">await</span> Task<span class=\"token punctuation\">.</span>CompletedTask<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">private</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">AsyncTaskStateMachine2</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">IAsyncStateMachine</span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> state<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">AsyncTaskMethodBuilder</span> builder<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">AsyncTask</span> asyncTask<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token comment\">// 相比没有写 await，多了一个 TaskAwaiter</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">TaskAwaiter</span> taskAwaiterField<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">MoveNext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> num <span class=\"token operator\">=</span> state<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token keyword\">try</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            <span class=\"token comment\">// 声明了一个局部变量 awaiter</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            <span class=\"token class-name\">TaskAwaiter</span> awaiter<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>num <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>                <span class=\"token comment\">// 获取当前 Task 的 awaiter</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>                awaiter <span class=\"token operator\">=</span> Task<span class=\"token punctuation\">.</span>CompletedTask<span class=\"token punctuation\">.</span><span class=\"token function\">GetAwaiter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>                <span class=\"token comment\">// 判断当前任务是否完成</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>awaiter<span class=\"token punctuation\">.</span>IsCompleted<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>                <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>                    num <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>                    taskAwaiterField <span class=\"token operator\">=</span> awaiter<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>                    <span class=\"token class-name\">AsyncTaskStateMachine2</span> stateMachine <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>                    <span class=\"token comment\">// 如果未完成，则取捕获同步上下文，并通过委托回调继续执行本状态机的 MoveNext 方法</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>                    builder<span class=\"token punctuation\">.</span><span class=\"token function\">AwaitUnsafeOnCompleted</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">ref</span> awaiter<span class=\"token punctuation\">,</span> <span class=\"token keyword\">ref</span> stateMachine<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>                    <span class=\"token comment\">// 直接返回，并不会执行 GetResult 方法，而是通过上一步的回调到本方法，继续执行后续代码</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>                    <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>            <span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>                awaiter <span class=\"token operator\">=</span> taskAwaiterField<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>                taskAwaiterField <span class=\"token operator\">=</span> <span class=\"token keyword\">default</span><span class=\"token punctuation\">(</span><span class=\"token type-expression class-name\">TaskAwaiter</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>                num <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>            awaiter<span class=\"token punctuation\">.</span><span class=\"token function\">GetResult</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>        <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> ex<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>            state <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>            builder<span class=\"token punctuation\">.</span><span class=\"token function\">SetException</span><span class=\"token punctuation\">(</span>ex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>            <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>        state <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//-2 状态表示已完成</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>        builder<span class=\"token punctuation\">.</span><span class=\"token function\">SetResult</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 标记为完成状态</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">SetStateMachine</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">IAsyncStateMachine</span> stateMachine<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>    <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> IAsyncStateMachine<span class=\"token punctuation\">.</span><span class=\"token function\">MoveNext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">MoveNext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>    <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> IAsyncStateMachine<span class=\"token punctuation\">.</span><span class=\"token function\">SetStateMachine</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">IAsyncStateMachine</span> stateMachine<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">SetStateMachine</span><span class=\"token punctuation\">(</span>stateMachine<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li>空方法返回 <code>Task&lt;void&gt;</code></li>\n</ul>\n<p><code>与返回Task一致</code></p>\n<ul>\n<li>IL 中关键方法解析</li>\n</ul>\n<h6 id=\"asynctaskmethodbuildertresult中-create和start方法\"><a class=\"anchor\" href=\"#asynctaskmethodbuildertresult中-create和start方法\">#</a> AsyncTaskMethodBuilder&lt;TResult&gt; 中 Create () 和 Start () 方法</h6>\n<figure class=\"highlight csharp\"><figcaption data-lang=\"C#\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\">AsyncTaskMethodBuilder<span class=\"token punctuation\">&lt;</span>TResult<span class=\"token punctuation\">></span></span> <span class=\"token function\">Create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">// 返回 AsyncTaskMethodBuilder&lt;TResult > 实例</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token keyword\">default</span><span class=\"token punctuation\">(</span><span class=\"token type-expression class-name\">AsyncTaskMethodBuilder<span class=\"token punctuation\">&lt;</span>TResult<span class=\"token punctuation\">></span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token generic-method\"><span class=\"token function\">Start</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>TStateMachine<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token keyword\">ref</span> <span class=\"token class-name\">TStateMachine</span> stateMachine<span class=\"token punctuation\">)</span> <span class=\"token keyword\">where</span> <span class=\"token class-name\">TStateMachine</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">IAsyncStateMachine</span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>stateMachine <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">ArgumentNullException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"stateMachine\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    Contract<span class=\"token punctuation\">.</span><span class=\"token function\">EndContractBlock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token class-name\">ExecutionContextSwitcher</span> ecs <span class=\"token operator\">=</span> <span class=\"token keyword\">default</span><span class=\"token punctuation\">(</span><span class=\"token type-expression class-name\">ExecutionContextSwitcher</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    RuntimeHelpers<span class=\"token punctuation\">.</span><span class=\"token function\">PrepareConstrainedRegions</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">try</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        ExecutionContext<span class=\"token punctuation\">.</span><span class=\"token function\">EstablishCopyOnWriteScope</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">ref</span> ecs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token comment\">// 其他的先不管什么意思，其目的就是调用 MoveNext 方法</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        stateMachine<span class=\"token punctuation\">.</span><span class=\"token function\">MoveNext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token keyword\">finally</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        ecs<span class=\"token punctuation\">.</span><span class=\"token function\">Undo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h6 id=\"movenext中的asynctaskmethodbuildertresultawaitunsafeoncompletedawaiterstatemachine方法\"><a class=\"anchor\" href=\"#movenext中的asynctaskmethodbuildertresultawaitunsafeoncompletedawaiterstatemachine方法\">#</a>  <code>MoveNext</code>  中的 <code>AsyncTaskMethodBuilder&lt;TResult&gt;.AwaitUnsafeOnCompleted(awaiter,stateMachine)</code>  方法</h6>\n<figure class=\"highlight csharp\"><figcaption data-lang=\"C#\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token generic-method\"><span class=\"token function\">AwaitUnsafeOnCompleted</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>TAwaiter<span class=\"token punctuation\">,</span> TStateMachine<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>            <span class=\"token keyword\">ref</span> <span class=\"token class-name\">TAwaiter</span> awaiter<span class=\"token punctuation\">,</span> <span class=\"token keyword\">ref</span> <span class=\"token class-name\">TStateMachine</span> stateMachine<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>            <span class=\"token keyword\">where</span> <span class=\"token class-name\">TAwaiter</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">ICriticalNotifyCompletion</span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>            <span class=\"token keyword\">where</span> <span class=\"token class-name\">TStateMachine</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">IAsyncStateMachine</span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            <span class=\"token keyword\">try</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>                <span class=\"token class-name\">AsyncMethodBuilderCore<span class=\"token punctuation\">.</span>MoveNextRunner</span> runnerToInitialize <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>                <span class=\"token comment\">//GetComopletionAction 方法获取回调方法</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>                <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> continuation <span class=\"token operator\">=</span> m_coreState<span class=\"token punctuation\">.</span><span class=\"token function\">GetCompletionAction</span><span class=\"token punctuation\">(</span>AsyncCausalityTracer<span class=\"token punctuation\">.</span>LoggingOn <span class=\"token punctuation\">?</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>Task <span class=\"token punctuation\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">ref</span> runnerToInitialize<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>                </pre></td></tr><tr><td data-num=\"12\"></td><td><pre>                Contract<span class=\"token punctuation\">.</span><span class=\"token function\">Assert</span><span class=\"token punctuation\">(</span>continuation <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"GetCompletionAction should always return a valid action.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>m_coreState<span class=\"token punctuation\">.</span>m_stateMachine <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>                <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>                    <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> builtTask <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>Task<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>                    Contract<span class=\"token punctuation\">.</span><span class=\"token function\">Assert</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>Object<span class=\"token punctuation\">.</span><span class=\"token function\">ReferenceEquals</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">object</span><span class=\"token punctuation\">)</span>stateMachine<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">object</span><span class=\"token punctuation\">)</span>stateMachine<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Expected an unboxed state machine reference\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>                    m_coreState<span class=\"token punctuation\">.</span><span class=\"token function\">PostBoxInitialization</span><span class=\"token punctuation\">(</span>stateMachine<span class=\"token punctuation\">,</span> runnerToInitialize<span class=\"token punctuation\">,</span> builtTask<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>                </pre></td></tr><tr><td data-num=\"21\"></td><td><pre>                <span class=\"token comment\">// 调用了 TaskAwaiter 的 UnsafeOnCompleted 的方法</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>                awaiter<span class=\"token punctuation\">.</span><span class=\"token function\">UnsafeOnCompleted</span><span class=\"token punctuation\">(</span>continuation<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>            <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>                AsyncMethodBuilderCore<span class=\"token punctuation\">.</span><span class=\"token function\">ThrowAsync</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">,</span> <span class=\"token named-parameter punctuation\">targetContext</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h6 id=\"先看上面的getcompletionaction方法\"><a class=\"anchor\" href=\"#先看上面的getcompletionaction方法\">#</a> 先看上面的 <code>GetCompletionAction</code>  方法</h6>\n<figure class=\"highlight csharp\"><figcaption data-lang=\"C#\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">SecuritySafeCritical</span></span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">internal</span> <span class=\"token return-type class-name\">Action</span> <span class=\"token function\">GetCompletionAction</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Task</span> taskForTracing<span class=\"token punctuation\">,</span> <span class=\"token keyword\">ref</span> <span class=\"token class-name\">MoveNextRunner</span> runnerToInitialize<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    Contract<span class=\"token punctuation\">.</span><span class=\"token function\">Assert</span><span class=\"token punctuation\">(</span>m_defaultContextAction <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> m_stateMachine <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>       <span class=\"token string\">\"Expected non-null m_stateMachine on non-null m_defaultContextAction\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    Debugger<span class=\"token punctuation\">.</span><span class=\"token function\">NotifyOfCrossThreadDependency</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token comment\">// 捕获执行上下文</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> capturedContext <span class=\"token operator\">=</span> ExecutionContext<span class=\"token punctuation\">.</span><span class=\"token function\">FastCapture</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token class-name\">Action</span> action<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token comment\">// 定义了一个 MoveNext 的 Runner, 然后给 Runner 赋值</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token class-name\">MoveNextRunner</span> runner<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>capturedContext <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> capturedContext<span class=\"token punctuation\">.</span>IsPreAllocatedDefault<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token comment\">// Get the cached delegate, and if it's non-null, return it.</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        action <span class=\"token operator\">=</span> m_defaultContextAction<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>action <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            Contract<span class=\"token punctuation\">.</span><span class=\"token function\">Assert</span><span class=\"token punctuation\">(</span>m_stateMachine <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"If the delegate was set, the state machine should have been as well.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            <span class=\"token keyword\">return</span> action<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        runner <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">MoveNextRunner</span><span class=\"token punctuation\">(</span>capturedContext<span class=\"token punctuation\">,</span> m_stateMachine<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token comment\">// 将 Runner 的 Run 方法通过 Action 传递，Run 方法其实是在执行上下文当中执行 MoveNext 方法</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        action <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Action</span><span class=\"token punctuation\">(</span>runner<span class=\"token punctuation\">.</span>Run<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>taskForTracing <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>            m_defaultContextAction <span class=\"token operator\">=</span> action <span class=\"token operator\">=</span> <span class=\"token function\">OutputAsyncCausalityEvents</span><span class=\"token punctuation\">(</span>taskForTracing<span class=\"token punctuation\">,</span> action<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>            m_defaultContextAction <span class=\"token operator\">=</span> action<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        runner <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">MoveNextRunner</span><span class=\"token punctuation\">(</span>capturedContext<span class=\"token punctuation\">,</span> m_stateMachine<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        action <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Action</span><span class=\"token punctuation\">(</span>runner<span class=\"token punctuation\">.</span>Run<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>taskForTracing <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>            action <span class=\"token operator\">=</span> <span class=\"token function\">OutputAsyncCausalityEvents</span><span class=\"token punctuation\">(</span>taskForTracing<span class=\"token punctuation\">,</span> action<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>m_stateMachine <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>        runnerToInitialize <span class=\"token operator\">=</span> runner<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>    <span class=\"token comment\">// 返回 Action 委托</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>    <span class=\"token keyword\">return</span> action<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h6 id=\"再看taskawaiter的unsafeoncompleted方法\"><a class=\"anchor\" href=\"#再看taskawaiter的unsafeoncompleted方法\">#</a> 再看 <code>TaskAwaiter</code>  的 UnsafeOnCompleted 方法</h6>\n<figure class=\"highlight csharp\"><figcaption data-lang=\"C#\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">SecurityCritical</span></span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">UnsafeOnCompleted</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Action</span> continuation<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    TaskAwaiter<span class=\"token punctuation\">.</span><span class=\"token function\">OnCompletedInternal</span><span class=\"token punctuation\">(</span>m_task<span class=\"token punctuation\">,</span> continuation<span class=\"token punctuation\">,</span> m_continueOnCapturedContext<span class=\"token punctuation\">,</span> \t\t\t          <span class=\"token named-parameter punctuation\">flowExecutionContext</span><span class=\"token punctuation\">:</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">MethodImplAttribute</span><span class=\"token attribute-arguments\"><span class=\"token punctuation\">(</span>MethodImplOptions<span class=\"token punctuation\">.</span>NoInlining<span class=\"token punctuation\">)</span></span></span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">SecurityCritical</span></span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">internal</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">OnCompletedInternal</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Task</span> task<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Action</span> continuation<span class=\"token punctuation\">,</span> <span class=\"token class-name\"><span class=\"token keyword\">bool</span></span> continueOnCapturedContext<span class=\"token punctuation\">,</span> \t\t\t<span class=\"token class-name\"><span class=\"token keyword\">bool</span></span> flowExecutionContext<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>   <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>continuation <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">ArgumentNullException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"continuation\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>   <span class=\"token class-name\">StackCrawlMark</span> stackMark <span class=\"token operator\">=</span> StackCrawlMark<span class=\"token punctuation\">.</span>LookForMyCaller<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre> </pre></td></tr><tr><td data-num=\"15\"></td><td><pre>   <span class=\"token comment\">// If TaskWait* ETW events are enabled, trace a beginning event for this await</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>   <span class=\"token comment\">// and set up an ending event to be traced when the asynchronous await completes.</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>   <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> TplEtwProvider<span class=\"token punctuation\">.</span>Log<span class=\"token punctuation\">.</span><span class=\"token function\">IsEnabled</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> Task<span class=\"token punctuation\">.</span>s_asyncDebuggingEnabled<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>   <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>       continuation <span class=\"token operator\">=</span> <span class=\"token function\">OutputWaitEtwEvents</span><span class=\"token punctuation\">(</span>task<span class=\"token punctuation\">,</span> continuation<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre> </pre></td></tr><tr><td data-num=\"22\"></td><td><pre>   <span class=\"token comment\">// Set the continuation onto the awaited task.</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>   <span class=\"token comment\">// 获取 TaskContinution 并把 Action 放入其中，调用其 Run 方法，里面的 Run 方法也是执行延续后回调</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>   task<span class=\"token punctuation\">.</span><span class=\"token function\">SetContinuationForAwait</span><span class=\"token punctuation\">(</span>continuation<span class=\"token punctuation\">,</span> continueOnCapturedContext<span class=\"token punctuation\">,</span> flowExecutionContext<span class=\"token punctuation\">,</span> <span class=\"token keyword\">ref</span> \t\t stackMark<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h6 id=\"setcontinuationforawait方法\"><a class=\"anchor\" href=\"#setcontinuationforawait方法\">#</a> SetContinuationForAwait 方法</h6>\n<ul>\n<li>根据各种条件创建不同的 <code>TaskContinuation</code> ，根据 Continution 定义的规则，执行里面的 Run 方法。</li>\n</ul>\n<figure class=\"highlight csharp\"><figcaption data-lang=\"C#\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">SecurityCritical</span></span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">internal</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">SetContinuationForAwait</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Action</span> continuationAction<span class=\"token punctuation\">,</span> <span class=\"token class-name\"><span class=\"token keyword\">bool</span></span> continueOnCapturedContext<span class=\"token punctuation\">,</span> <span class=\"token class-name\"><span class=\"token keyword\">bool</span></span> flowExecutionContext<span class=\"token punctuation\">,</span> <span class=\"token keyword\">ref</span> <span class=\"token class-name\">StackCrawlMark</span> stackMark<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    Contract<span class=\"token punctuation\">.</span><span class=\"token function\">Requires</span><span class=\"token punctuation\">(</span>continuationAction <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token class-name\">TaskContinuation</span> tc <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>continueOnCapturedContext<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> syncCtx <span class=\"token operator\">=</span> SynchronizationContext<span class=\"token punctuation\">.</span>CurrentNoFlow<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>syncCtx <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> syncCtx<span class=\"token punctuation\">.</span><span class=\"token function\">GetType</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token keyword\">typeof</span><span class=\"token punctuation\">(</span><span class=\"token type-expression class-name\">SynchronizationContext</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            tc <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">SynchronizationContextAwaitTaskContinuation</span><span class=\"token punctuation\">(</span>syncCtx<span class=\"token punctuation\">,</span> continuationAction<span class=\"token punctuation\">,</span> flowExecutionContext<span class=\"token punctuation\">,</span> <span class=\"token keyword\">ref</span> stackMark<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> scheduler <span class=\"token operator\">=</span> TaskScheduler<span class=\"token punctuation\">.</span>InternalCurrent<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>scheduler <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> scheduler <span class=\"token operator\">!=</span> TaskScheduler<span class=\"token punctuation\">.</span>Default<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>                tc <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">TaskSchedulerAwaitTaskContinuation</span><span class=\"token punctuation\">(</span>scheduler<span class=\"token punctuation\">,</span> continuationAction<span class=\"token punctuation\">,</span> flowExecutionContext<span class=\"token punctuation\">,</span> <span class=\"token keyword\">ref</span> stackMark<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>tc <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> flowExecutionContext<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        tc <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">AwaitTaskContinuation</span><span class=\"token punctuation\">(</span>continuationAction<span class=\"token punctuation\">,</span> <span class=\"token named-parameter punctuation\">flowExecutionContext</span><span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token named-parameter punctuation\">stackMark</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">ref</span> stackMark<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>tc <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">AddTaskContinuation</span><span class=\"token punctuation\">(</span>tc<span class=\"token punctuation\">,</span> <span class=\"token named-parameter punctuation\">addBeforeOthers</span><span class=\"token punctuation\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>            <span class=\"token comment\">// 调用 continution 的 Run 方法，按照指定的规则执行</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>            tc<span class=\"token punctuation\">.</span><span class=\"token function\">Run</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> <span class=\"token named-parameter punctuation\">bCanInlineContinuationTask</span><span class=\"token punctuation\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">AddTaskContinuation</span><span class=\"token punctuation\">(</span>continuationAction<span class=\"token punctuation\">,</span> <span class=\"token named-parameter punctuation\">addBeforeOthers</span><span class=\"token punctuation\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>            <span class=\"token comment\">//TaskContinution 最后都没有就执行非安全的方法</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>            <span class=\"token comment\">// 实际上是执行 ThreadPool.UnsafeQueueUserWorkItem () 方法</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>            AwaitTaskContinuation<span class=\"token punctuation\">.</span><span class=\"token function\">UnsafeScheduleAction</span><span class=\"token punctuation\">(</span>continuationAction<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><code>补充中...</code></p>\n<h5 id=\"参考链接\"><a class=\"anchor\" href=\"#参考链接\">#</a> 参考链接</h5>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9kb2NzLm1pY3Jvc29mdC5jb20vZW4tdXMvZG90bmV0L2NzaGFycC9wcm9ncmFtbWluZy1ndWlkZS9jb25jZXB0cy9hc3luYy8=\">使用 async 和 await 进行异步编程</span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9kb2NzLm1pY3Jvc29mdC5jb20vZW4tdXMvZG90bmV0L3N0YW5kYXJkL2FzeW5jaHJvbm91cy1wcm9ncmFtbWluZy1wYXR0ZXJucy90YXNrLWJhc2VkLWFzeW5jaHJvbm91cy1wYXR0ZXJuLXRhcA==\">.Net 基于任务的异步模式</span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9kZXZibG9ncy5taWNyb3NvZnQuY29tL2RvdG5ldC9jb25maWd1cmVhd2FpdC1mYXE=\">ConfigureAwait 讲解</span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9kZXZibG9ncy5taWNyb3NvZnQuY29tL3BmeHRlYW0vZXhlY3V0aW9uY29udGV4dC12cy1zeW5jaHJvbml6YXRpb25jb250ZXh0Lw==\">ExecutionContext vs SynchronizationContext</span> 【<span class=\"exturl\" data-url=\"aHR0cHM6Ly96aHVhbmxhbi56aGlodS5jb20vcC8zNzgzODY0NDI=\">知乎链接</span>】</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2RhdmlkZm93bC9Bc3BOZXRDb3JlRGlhZ25vc3RpY1NjZW5hcmlvcy9ibG9iL21hc3Rlci9Bc3luY0d1aWRhbmNlLm1k\">github 异步编程注意事项</span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0dvZERpY2VzL2FydGljbGUvZGV0YWlscy84NzI1OTM5OA==\">异步 IL 反编译</span></p>\n",
            "tags": [
                "C#基础",
                "C#基础"
            ]
        },
        {
            "id": "http://www.chlneter.com/db/%E6%85%A2SQL%E4%BC%98%E5%8C%96/",
            "url": "http://www.chlneter.com/db/%E6%85%A2SQL%E4%BC%98%E5%8C%96/",
            "title": "",
            "date_published": "2023-01-11T14:08:34.430Z",
            "content_html": "",
            "tags": []
        },
        {
            "id": "http://www.chlneter.com/db/MySQLWindowsZip%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/",
            "url": "http://www.chlneter.com/db/MySQLWindowsZip%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/",
            "title": "MySQLWindowsZip安装教程",
            "date_published": "2023-01-11T13:19:43.000Z",
            "content_html": "<h4 id=\"windows下mysql压缩包版安装教程\"><a class=\"anchor\" href=\"#windows下mysql压缩包版安装教程\">#</a> Windows 下 MySQL 压缩包版安装教程</h4>\n<h5 id=\"附下载地址\"><a class=\"anchor\" href=\"#附下载地址\">#</a> 附下载地址</h5>\n<h5 id=\"mysql\"><a class=\"anchor\" href=\"#mysql\">#</a> <span class=\"exturl\" data-url=\"aHR0cHM6Ly9kZXYubXlzcWwuY29tL2Rvd25sb2Fkcy9teXNxbC8=\">mysql</span></h5>\n<p><img data-src=\"https://s2.loli.net/2023/01/11/2nlvPtygNRSpGcb.jpg\" alt=\"mysql_download.jpg\" /></p>\n<h5 id=\"创建myini配置文件\"><a class=\"anchor\" href=\"#创建myini配置文件\">#</a> 创建 my.ini 配置文件</h5>\n<h6 id=\"设置端口-最大连接数-字符编码集-存储引擎-数据存放目录\"><a class=\"anchor\" href=\"#设置端口-最大连接数-字符编码集-存储引擎-数据存放目录\">#</a> 设置端口、最大连接数、字符编码集、存储引擎、数据存放目录</h6>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>[mysql]</pre></td></tr><tr><td data-num=\"2\"></td><td><pre># 设置mysql客户端默认字符集 #8.0.2 是utf8mb4</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>default-character-set=utf8mb4</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>[mysqld]</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>#设置3306端口</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>port=3306</pre></td></tr><tr><td data-num=\"7\"></td><td><pre># 设置mysql的安装目录</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>basedir=D:\\mysql-8.0.29-winx64</pre></td></tr><tr><td data-num=\"9\"></td><td><pre># 设置mysql数据库的数据的存放目录</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>datadir=D:\\mysql-8.0.29-winx64\\data</pre></td></tr><tr><td data-num=\"11\"></td><td><pre># 允许最大连接数</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>max_connections=200</pre></td></tr><tr><td data-num=\"13\"></td><td><pre># 服务端使用的字符集默认为UTF8 #8.0.2 是utf8mb4</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>character-set-server=utf8mb4</pre></td></tr><tr><td data-num=\"15\"></td><td><pre># 创建新表时将使用的默认存储引擎</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>default-storage-engine=INNODB</pre></td></tr></table></figure><h5 id=\"执行命令\"><a class=\"anchor\" href=\"#执行命令\">#</a> 执行命令</h5>\n<h6 id=\"初始化\"><a class=\"anchor\" href=\"#初始化\">#</a> 初始化</h6>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>mysqld --initialize-insecure</pre></td></tr></table></figure><p><code>说明：-insecure表示初始化过程中不设置密码，不设置这个命令后面第一次登陆的时候找自动生成的密码会很麻烦，不体验过不知道啊</code> 😆</p>\n<h6 id=\"安装并启动服务\"><a class=\"anchor\" href=\"#安装并启动服务\">#</a> 安装并启动服务</h6>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>mysqld <span class=\"token function\">install</span> mysqlservice 服务名自己定义</pre></td></tr></table></figure><figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>net start mysqlservice</pre></td></tr></table></figure><p><code>卸载windows服务命令</code></p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>sc delete 服务名称</pre></td></tr></table></figure><h6 id=\"设置密码\"><a class=\"anchor\" href=\"#设置密码\">#</a> 设置密码</h6>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>mysql <span class=\"token parameter variable\">-u</span> root <span class=\"token parameter variable\">-p</span> 直接回车即可，没有密码</pre></td></tr></table></figure><figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>ALTER <span class=\"token environment constant\">USER</span> <span class=\"token string\">'root'</span>@<span class=\"token string\">'localhost'</span> IDENTIFIED WITH mysql_native_password BY <span class=\"token string\">'123456'</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h6 id=\"刷新\"><a class=\"anchor\" href=\"#刷新\">#</a> 刷新</h6>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>flush privileges<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h6 id=\"重新登陆搞定\"><a class=\"anchor\" href=\"#重新登陆搞定\">#</a> 重新登陆搞定。</h6>\n<h5 id=\"创建用户并赋予权限\"><a class=\"anchor\" href=\"#创建用户并赋予权限\">#</a> 创建用户并赋予权限</h5>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>create user test@<span class=\"token string\">'%'</span> identified by <span class=\"token string\">'test'</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><code>'%'表示登陆时不限制IP</code></p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>grant select,update,delete,insert on test.* to test@<span class=\"token string\">'%'</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>🐶</p>\n",
            "tags": [
                "MySQL",
                "MySQL"
            ]
        },
        {
            "id": "http://www.chlneter.com/db/mysql/",
            "url": "http://www.chlneter.com/db/mysql/",
            "title": "mysql",
            "date_published": "2022-09-25T10:59:18.000Z",
            "content_html": "",
            "tags": []
        },
        {
            "id": "http://www.chlneter.com/%E6%B7%B1%E6%8B%B7%E8%B4%9D%E4%B8%8E%E6%B5%85%E6%8B%B7%E8%B4%9D/",
            "url": "http://www.chlneter.com/%E6%B7%B1%E6%8B%B7%E8%B4%9D%E4%B8%8E%E6%B5%85%E6%8B%B7%E8%B4%9D/",
            "title": "深拷贝与浅拷贝",
            "date_published": "2022-09-24T09:50:28.000Z",
            "content_html": "<h5 id=\"深拷贝浅拷贝\"><a class=\"anchor\" href=\"#深拷贝浅拷贝\">#</a> 深拷贝 &amp; 浅拷贝</h5>\n<ul>\n<li>浅拷贝：指的是拷贝一个对象时，仅仅拷贝对象的引用进行拷贝，但是拷贝对象和源对象还是引用同一份实体。此时，其中一个对象的改变都会影响到另一个对象。</li>\n<li>深拷贝：指的是拷贝一个对象时，不仅仅把对象的引用进行复制，还把该对象引用的值也一起拷贝。这样进行深拷贝后的拷贝对象就和源对象互相独立，其中任何一个对象的改动都不会对另外一个对象造成影响。</li>\n</ul>\n<h6 id=\"补充\"><a class=\"anchor\" href=\"#补充\">#</a> 补充</h6>\n<p><code>NET中值类型默认是深拷贝的，而对于引用类型，默认实现的是浅拷贝</code></p>\n<h5 id=\"深拷贝的几种方式\"><a class=\"anchor\" href=\"#深拷贝的几种方式\">#</a> 深拷贝的几种方式</h5>\n<ol>\n<li>序列化</li>\n<li>反射</li>\n<li>表达式树 (表达式缓存)</li>\n</ol>\n<h6 id=\"序列化\"><a class=\"anchor\" href=\"#序列化\">#</a> 序列化</h6>\n<h6 id=\"三种方式xml-二进制-数据契约datacontractserializer\"><a class=\"anchor\" href=\"#三种方式xml-二进制-数据契约datacontractserializer\">#</a> 三种方式：Xml、二进制、数据契约 DataContractSerializer</h6>\n<ul>\n<li>利用 XML 序列化和反序列化实现</li>\n</ul>\n<figure class=\"highlight csharp\"><figcaption data-lang=\"C#\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/// &lt;summary></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">/// 利用 XML 序列化和反序列化实现</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">/// &lt;/summary></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">/// &lt;typeparam name=\"T\">&lt;/typeparam></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">/// &lt;param name=\"obj\">&lt;/param></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">/// &lt;returns>&lt;/returns></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\">T</span> <span class=\"token generic-method\"><span class=\"token function\">DeepCopyWithXmlSerializer</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>T<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token class-name\">T</span> obj<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token class-name\"><span class=\"token keyword\">object</span></span> retval<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">using</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">MemoryStream</span> ms <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">MemoryStream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token class-name\">XmlSerializer</span> xml <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">XmlSerializer</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span><span class=\"token punctuation\">(</span><span class=\"token type-expression class-name\">T</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        xml<span class=\"token punctuation\">.</span><span class=\"token function\">Serialize</span><span class=\"token punctuation\">(</span>ms<span class=\"token punctuation\">,</span> obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        ms<span class=\"token punctuation\">.</span><span class=\"token function\">Seek</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> SeekOrigin<span class=\"token punctuation\">.</span>Begin<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        retval <span class=\"token operator\">=</span> xml<span class=\"token punctuation\">.</span><span class=\"token function\">Deserialize</span><span class=\"token punctuation\">(</span>ms<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        ms<span class=\"token punctuation\">.</span><span class=\"token function\">Close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>T<span class=\"token punctuation\">)</span>retval<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li>利用二进制序列化和反序列实现</li>\n</ul>\n<figure class=\"highlight csharp\"><figcaption data-lang=\"C#\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/// &lt;summary></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">/// 利用二进制序列化和反序列实现</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">/// &lt;/summary></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">/// &lt;typeparam name=\"T\">&lt;/typeparam></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">/// &lt;param name=\"obj\">&lt;/param></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">/// &lt;returns>&lt;/returns></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\">T</span> <span class=\"token generic-method\"><span class=\"token function\">DeepCopyWithBinarySerialize</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>T<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token class-name\">T</span> obj<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">using</span> <span class=\"token class-name\">MemoryStream</span> stream <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">MemoryStream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token class-name\">IFormatter</span> formatter <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">BinaryFormatter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    formatter<span class=\"token punctuation\">.</span><span class=\"token function\">Serialize</span><span class=\"token punctuation\">(</span>stream<span class=\"token punctuation\">,</span> obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token comment\">// 将当前流的位置设置成起始位置</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    stream<span class=\"token punctuation\">.</span><span class=\"token function\">Seek</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> SeekOrigin<span class=\"token punctuation\">.</span>Begin<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>T<span class=\"token punctuation\">)</span>formatter<span class=\"token punctuation\">.</span><span class=\"token function\">Deserialize</span><span class=\"token punctuation\">(</span>stream<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li>利用 DataContractSerializer 序列化和反序列化实现</li>\n</ul>\n<figure class=\"highlight csharp\"><figcaption data-lang=\"C#\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/// &lt;summary></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">/// 利用 DataContractSerializer 序列化和反序列化实现</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">/// &lt;/summary></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">/// &lt;typeparam name=\"T\">&lt;/typeparam></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">/// &lt;param name=\"obj\">&lt;/param></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">/// &lt;returns>&lt;/returns></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\">T</span> <span class=\"token generic-method\"><span class=\"token function\">DeepCopy</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>T<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token class-name\">T</span> obj<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token class-name\"><span class=\"token keyword\">object</span></span> retval<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">using</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">MemoryStream</span> ms <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">MemoryStream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token class-name\">DataContractSerializer</span> ser <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">DataContractSerializer</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span><span class=\"token punctuation\">(</span><span class=\"token type-expression class-name\">T</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        ser<span class=\"token punctuation\">.</span><span class=\"token function\">WriteObject</span><span class=\"token punctuation\">(</span>ms<span class=\"token punctuation\">,</span> obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        ms<span class=\"token punctuation\">.</span><span class=\"token function\">Seek</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> SeekOrigin<span class=\"token punctuation\">.</span>Begin<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        retval <span class=\"token operator\">=</span> ser<span class=\"token punctuation\">.</span><span class=\"token function\">ReadObject</span><span class=\"token punctuation\">(</span>ms<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        ms<span class=\"token punctuation\">.</span><span class=\"token function\">Close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>T<span class=\"token punctuation\">)</span>retval<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h6 id=\"反射\"><a class=\"anchor\" href=\"#反射\">#</a> 反射</h6>\n<figure class=\"highlight csharp\"><figcaption data-lang=\"C#\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/// &lt;summary></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">/// 反射的方式拷贝</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">/// &lt;/summary></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">/// &lt;param name=\"obj\">&lt;/param></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">/// &lt;returns>&lt;/returns></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\">T</span> <span class=\"token generic-method\"><span class=\"token function\">ReflreshClone</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>T<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token class-name\">T</span> obj<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token class-name\">Type</span> type <span class=\"token operator\">=</span> obj<span class=\"token punctuation\">.</span><span class=\"token function\">GetType</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token comment\">// 对于值类型和 string 的特性（驻留性） .Net 值类型默认是深拷贝</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>obj <span class=\"token keyword\">is</span> <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> <span class=\"token operator\">||</span> type<span class=\"token punctuation\">.</span>IsValueType<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> obj<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token comment\">// 如果是数组类型</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>type<span class=\"token punctuation\">.</span>IsArray<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token class-name\">Type</span> elementType <span class=\"token operator\">=</span> Type<span class=\"token punctuation\">.</span><span class=\"token function\">GetType</span><span class=\"token punctuation\">(</span>type<span class=\"token punctuation\">.</span>FullName<span class=\"token punctuation\">.</span><span class=\"token function\">Replace</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"[]\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">string</span><span class=\"token punctuation\">.</span>Empty<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token comment\">//Type elementType = type.GetElementType();</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> array <span class=\"token operator\">=</span> obj <span class=\"token keyword\">as</span> <span class=\"token class-name\">Array</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token class-name\">Array</span> copied <span class=\"token operator\">=</span> Array<span class=\"token punctuation\">.</span><span class=\"token function\">CreateInstance</span><span class=\"token punctuation\">(</span>elementType<span class=\"token punctuation\">,</span> array<span class=\"token punctuation\">.</span>Length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">int</span></span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> array<span class=\"token punctuation\">.</span>Length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            copied<span class=\"token punctuation\">.</span><span class=\"token function\">SetValue</span><span class=\"token punctuation\">(</span><span class=\"token function\">ReflreshClone</span><span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">.</span><span class=\"token function\">GetValue</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>T<span class=\"token punctuation\">)</span>Convert<span class=\"token punctuation\">.</span><span class=\"token function\">ChangeType</span><span class=\"token punctuation\">(</span>copied<span class=\"token punctuation\">,</span> obj<span class=\"token punctuation\">.</span><span class=\"token function\">GetType</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token class-name\">T</span> newObj <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>T<span class=\"token punctuation\">)</span>Activator<span class=\"token punctuation\">.</span><span class=\"token function\">CreateInstance</span><span class=\"token punctuation\">(</span>type<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token keyword\">foreach</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">PropertyInfo</span> prop <span class=\"token keyword\">in</span> type<span class=\"token punctuation\">.</span><span class=\"token function\">GetProperties</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        BindingFlags<span class=\"token punctuation\">.</span>Public <span class=\"token operator\">|</span> BindingFlags<span class=\"token punctuation\">.</span>NonPublic </pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token operator\">|</span> BindingFlags<span class=\"token punctuation\">.</span>Instance <span class=\"token operator\">|</span> BindingFlags<span class=\"token punctuation\">.</span>Static<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token comment\">// 判断属性是否可写 get set 访问器</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>prop<span class=\"token punctuation\">.</span>CanWrite<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>            <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> prototypeValue <span class=\"token operator\">=</span> prop<span class=\"token punctuation\">.</span><span class=\"token function\">GetValue</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>prototypeValue <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>                <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>            prop<span class=\"token punctuation\">.</span><span class=\"token function\">SetValue</span><span class=\"token punctuation\">(</span>newObj<span class=\"token punctuation\">,</span> prototypeValue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    <span class=\"token keyword\">return</span> newObj<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h6 id=\"表达式缓存克隆\"><a class=\"anchor\" href=\"#表达式缓存克隆\">#</a> 表达式缓存克隆</h6>\n<figure class=\"highlight csharp\"><figcaption data-lang=\"C#\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">CloneExpression<span class=\"token punctuation\">&lt;</span>T<span class=\"token punctuation\">,</span> R<span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">readonly</span> <span class=\"token class-name\">Func<span class=\"token punctuation\">&lt;</span>T<span class=\"token punctuation\">,</span> R<span class=\"token punctuation\">></span></span> cache <span class=\"token operator\">=</span> <span class=\"token function\">GetFunc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\">Func<span class=\"token punctuation\">&lt;</span>T<span class=\"token punctuation\">,</span> R<span class=\"token punctuation\">></span></span> <span class=\"token function\">GetFunc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token comment\">// 创建表达式树种的参数或变量的节点 p=></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token class-name\">ParameterExpression</span> parameterExpression <span class=\"token operator\">=</span> Expression<span class=\"token punctuation\">.</span><span class=\"token function\">Parameter</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span><span class=\"token punctuation\">(</span><span class=\"token type-expression class-name\">T</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"p\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token comment\">// 存放参数或者变量</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token class-name\">List<span class=\"token punctuation\">&lt;</span>MemberBinding<span class=\"token punctuation\">></span></span> memberBindingList <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">List<span class=\"token punctuation\">&lt;</span>MemberBinding<span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token comment\">// 构造 p=> new R &#123;a=p.a,b=p.b,c=0&#125;;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">foreach</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> item <span class=\"token keyword\">in</span> <span class=\"token keyword\">typeof</span><span class=\"token punctuation\">(</span><span class=\"token type-expression class-name\">R</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">GetProperties</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>item<span class=\"token punctuation\">.</span>CanWrite<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>                <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            <span class=\"token class-name\">PropertyInfo</span> info <span class=\"token operator\">=</span> <span class=\"token keyword\">typeof</span><span class=\"token punctuation\">(</span><span class=\"token type-expression class-name\">T</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">GetProperty</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">.</span>Name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>info <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>                <span class=\"token comment\">// 创建属性 p.a p.b p.c</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>                <span class=\"token class-name\">MemberExpression</span> property <span class=\"token operator\">=</span> Expression<span class=\"token punctuation\">.</span><span class=\"token function\">Property</span><span class=\"token punctuation\">(</span>parameterExpression<span class=\"token punctuation\">,</span> info<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>                <span class=\"token comment\">// 字段与属性绑定 a = p.a</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>                <span class=\"token class-name\">MemberBinding</span> memberBinding <span class=\"token operator\">=</span> Expression<span class=\"token punctuation\">.</span><span class=\"token function\">Bind</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">,</span> property<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>                memberBindingList<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span>memberBinding<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token comment\">//new B() &#123;a = p.a, b = p.b&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token class-name\">MemberInitExpression</span> memberInitExpression <span class=\"token operator\">=</span> Expression<span class=\"token punctuation\">.</span><span class=\"token function\">MemberInit</span><span class=\"token punctuation\">(</span>Expression<span class=\"token punctuation\">.</span><span class=\"token function\">New</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span><span class=\"token punctuation\">(</span><span class=\"token type-expression class-name\">R</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> memberBindingList<span class=\"token punctuation\">.</span><span class=\"token function\">ToArray</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token comment\">//p => new B() &#123;a = p.a, b = p.b&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token class-name\">Expression<span class=\"token punctuation\">&lt;</span>Func<span class=\"token punctuation\">&lt;</span>T<span class=\"token punctuation\">,</span> R<span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> lambda <span class=\"token operator\">=</span> Expression<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">Lambda</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>Func<span class=\"token punctuation\">&lt;</span>T<span class=\"token punctuation\">,</span> R<span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span>memberInitExpression<span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">ParameterExpression<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> <span class=\"token punctuation\">&#123;</span> parameterExpression <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token keyword\">return</span> lambda<span class=\"token punctuation\">.</span><span class=\"token function\">Compile</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\">R</span> <span class=\"token function\">Clone</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">T</span> T<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token function\">cache</span><span class=\"token punctuation\">(</span>T<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h6 id=\"参考链接\"><a class=\"anchor\" href=\"#参考链接\">#</a> 参考链接</h6>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL0J1cnRzZXYtQWxleGV5L25ldC1vYmplY3QtZGVlcC1jb3B5L2Jsb2IvbWFzdGVyL09iamVjdEV4dGVuc2lvbnMuY3M=\">Clone</span></p>\n",
            "tags": [
                "C#基础"
            ]
        },
        {
            "id": "http://www.chlneter.com/%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6/",
            "url": "http://www.chlneter.com/%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6/",
            "title": "垃圾回收",
            "date_published": "2022-09-21T09:34:09.000Z",
            "content_html": "<p>说明 GC 之前先讲解下虚拟内存</p>\n<h5 id=\"虚拟内存\"><a class=\"anchor\" href=\"#虚拟内存\">#</a> 虚拟内存</h5>\n<ul>\n<li>一个系统如果同时运行着很多进程，为各进程分配的内存之和可能会大于实际可用的物理内存，虚拟内存管理使得这种情况下各进程仍然能够正常运行。因为各进程分配的只不过是虚拟内存的页面，这些页面的数据可以映射到物理内存页面，也可以临时保存到磁盘上而不占用物理内存页面，在磁盘上临时保存虚拟内存页面的可能是一个磁盘分区，也可能是一个磁盘文件，称为交换设备。<br />\n当物理内存不够用时，将一些不常用的物理页面中的数据临时保存到交换设备，然后这个物理页面就认为是空闲的了，可以重新分配给进程使用，这个过程称为换出。如果进程要用到被换出的页面，就从交换设备再加载回物理内存，这称为换入。换出和换入操作统称为换页，因此：系统中可分配的内存总量 = 物理内存的大小 + 交换设备的大小。</li>\n<li>虚拟内存有三种状态，Free、Reserved、Committed</li>\n</ul>\n<h5 id=\"什么是托管堆\"><a class=\"anchor\" href=\"#什么是托管堆\">#</a> 什么是托管堆？</h5>\n<p>在基于 Net 框架的应用程序中初始化新进程时，CLR 在初始化之后会为进程保留一个连续的地址空间区域，用于存储和对象管理，这个保留的地址空间被称为托管堆，分配的内存就是上面提到的虚拟内存，托管堆分为小对象堆和大对象堆，大对象堆包含不少于 85000 个字节的对象，这些对象通常是数组。</p>\n<h5 id=\"net框架中的内存分配与释放\"><a class=\"anchor\" href=\"#net框架中的内存分配与释放\">#</a> Net 框架中的内存分配与释放</h5>\n<ul>\n<li>内存分配</li>\n</ul>\n<p>托管堆中维护着一个指针，用它指向将在堆中分配的下一个对象的地址。<br />\n最初，该指针设置为指向托管堆的基址。 托管堆上部署了所有引用类型。 应用程序创建第一个引用类型时，将为托管堆的基址中的类型分配内存。 应用程序创建下一个对象时，垃圾回收器在紧接第一个对象后面的地址空间内为它分配内存。 只要地址空间可用，垃圾回收器就会继续以这种方式为新对象分配空间。</p>\n<p>从托管堆中分配内存要比非托管内存分配速度快。<br />\n由于运行时通过为指针添加值来为对象分配内存，所以这几乎和从堆栈中分配内存一样快。 另外，由于连续分配的新对象在托管堆中是连续存储，所以应用程序可以快速访问这些对象。</p>\n<ul>\n<li>内存释放</li>\n</ul>\n<p>.NET 的垃圾回收器管理应用程序的内存分配和释放。</p>\n<h6 id=\"垃圾的定义\"><a class=\"anchor\" href=\"#垃圾的定义\">#</a> 垃圾的定义</h6>\n<p>简单理解就是没有被引用的对象</p>\n<h6 id=\"垃圾回收的工作原理\"><a class=\"anchor\" href=\"#垃圾回收的工作原理\">#</a> 垃圾回收的工作原理</h6>\n<p>是<strong>应用程序根</strong>中遍历托管堆中的对象，标记哪些被使用对象（那些没人使用的就是所谓的垃圾），然后把可达对象转移到一个连续的地址空间（也叫压缩），其余的所有没用的对象内存被回收掉。</p>\n<p><strong>应用程序的根</strong>包含线程堆栈上的静态字段、局部变量、CPU 寄存器、GC 句柄和终结队列。</p>\n<h6 id=\"分代回收过程\"><a class=\"anchor\" href=\"#分代回收过程\">#</a> 分代回收过程</h6>\n<p>主要分三步骤：标记、清除、压缩。</p>\n<ul>\n<li>标记：先假设所有对象都是垃圾，根据应用程序根 Root 遍历堆上的每一个引用对象，生成可达对象图，对于还在使用的对象（可达对象）进行标记（其实就是在对象同步索引块中开启一个标示位）</li>\n<li>清除：针对所有不可达对象进行清除操作，针对普通对象直接回收内存，而对于实现了终结器的对象（实现了析构函数的对象）需要单独回收处理。清除之后，内存就会变得不连续了，就是步骤 3 的工作了。</li>\n<li>压缩：把剩下的对象转移到一个连续的内存，因为这些对象地址变了，还需要把那些 Root 跟指针的地址修改为移动后的新地址。</li>\n</ul>\n<h6 id=\"分代gc算法\"><a class=\"anchor\" href=\"#分代gc算法\">#</a> 分代 GC 算法</h6>\n<p>Net 框架为了使得垃圾回收更加高效，优化其性能，使用了分代垃圾回收算法，将<strong>托管堆</strong>分为 0/1/2 三代，至于为什么分代，是因为可以针对与每一代进行回收而不是每次将整个托管堆进行回收。另一个原因是在生产环境中的应用程序已经是优化好的，几乎所有的对象都在第 0 代中回收了。</p>\n<p>当条件得到满足时，垃圾回收将在特定代上发生</p>\n<ul>\n<li>第 0 代：主要包含短生命周期对象，年轻代，当第 0 代托管堆已满时，再次创建对象 GC 会对第 0 代进行收集，回收之后未被回收的对象将提升到第 1 代中。</li>\n<li>第 1 代：主要包含第 0 代未回收的对象，它是第 0 代和第 2 代，也就是短生命周期和长生命周期之间的缓冲区。我们开发写的代码只能是分配在第 0、2 代，1 代作为 0 和 2 代之间的缓冲区，由 GC 处理。</li>\n<li>第 2 代：大对象堆和长生命周期的对象存在于此代中。当第 2 代垃圾回收完之后仍未回收的对象也会保留在第 2 代中。</li>\n</ul>\n<h6 id=\"暂时代和暂时段\"><a class=\"anchor\" href=\"#暂时代和暂时段\">#</a> 暂时代和暂时段</h6>\n<p>第 0 代和第 1 代对象的生命周期较短，这两代称之为暂时代</p>\n<p>暂时代在被称之为 “暂时段” 的内存段中进行分配</p>\n<h6 id=\"注意事项\"><a class=\"anchor\" href=\"#注意事项\">#</a> 注意事项</h6>\n<p>回收一代时，同时也会回收它前面的所有代，所以说 第 2 代垃圾回收也称为完整垃圾回收，因为它回收所有代中的对象，如果第 0 代托管堆的回收没有回收足够的内存供应用程序创建新对象，垃圾回收器就会先执行第 1 代托管堆的回收，然后再执行第 2 代托管堆的回收。 第 1 级托管堆中未被回收的对象将会升级至第 2 级托管堆</p>\n<h6 id=\"垃圾回收优点\"><a class=\"anchor\" href=\"#垃圾回收优点\">#</a> 垃圾回收优点</h6>\n<ul>\n<li>开发人员不必关心内存的分配与释放，不必手动释放内存。</li>\n<li>能有效的分配托管堆上的对象。</li>\n<li>回收不再使用的对象，清除它们的内存，并保留内存以用于将来分配。 托管对象会自动获取干净的内容来开始，因此，它们的构造函数不必对每个数据字段进行初始化。</li>\n<li>通过确保对象不能自己使用分配给另一个对象的内存来提供内存安全</li>\n</ul>\n<h6 id=\"dispose-和-finalize方法\"><a class=\"anchor\" href=\"#dispose-和-finalize方法\">#</a> Dispose 和 Finalize 方法</h6>\n<p>.NET 中提供释放非托管资源的方式主要是：<strong>Finalize</strong> () 和 <strong>Dispose</strong> ()，如果不能及时释放非托管资源会造成内存泄漏，例如数据库连接不被释放就可能导致连接池中的可用数据库连接用尽。文件不关闭会导致其它进程无法读写这个文件等等。</p>\n<p><code>Finalize虽然看似手动清除非托管资源，其实还是由垃圾回收器维护，它的最大作用是确保非托管资源一定被释放</code></p>\n<ul>\n<li>显示调用 Dispose 接口</li>\n<li>using () 语法糖，其本质是 try...finally</li>\n</ul>\n<p>垃圾回收器会在一下条件下自动调用 Finalize 方法</p>\n<ul>\n<li>垃圾回收器发现对象不可访问后，例外情况，在 Dispose 方法中调用了 GC.SuppressFinalize (object obj)(不要调用指定对象的终结器)</li>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL3huLS1ybXE1N3IuTkVU\">仅在.NET</span> Framework，在关闭应用程序域期间，除非对象不受最终化的影响。 在关闭期间，即使是仍可访问的对象也会最终完成<br />\n Finalize 仅在给定实例上自动调用一次</li>\n</ul>\n<h6 id=\"dispose与finalize方法的不同点\"><a class=\"anchor\" href=\"#dispose与finalize方法的不同点\">#</a> Dispose 与 Finalize 方法的不同点</h6>\n<ul>\n<li>\n<p>Finalize 是 CLR 提供的一个机制，Dispose</p>\n</li>\n<li>\n<p>Finalize 由垃圾回收器调用；Dispose 由对象调用仅仅是一个设计模式 (作为一个 IDisposable 接口的方法)，可以及时手动调用非托管资源的释放，无需等到该类对象被垃圾回收那个时间点</p>\n</li>\n<li>\n<p>Finalize 无需担心因为没有调用 Finalize 而使非托管资源得不到释放，而 Dispose 必须手动调用</p>\n</li>\n<li>\n<p>Finalize 因为由垃圾回收器管理，不能保证立即释放非托管资源；而 Dispose 一调用便释放非托管资源</p>\n</li>\n</ul>\n",
            "tags": [
                "NetCore",
                "NetCore"
            ]
        },
        {
            "id": "http://www.chlneter.com/%E5%A7%94%E6%89%98%E4%B8%8E%E4%BA%8B%E4%BB%B6/",
            "url": "http://www.chlneter.com/%E5%A7%94%E6%89%98%E4%B8%8E%E4%BA%8B%E4%BB%B6/",
            "title": "委托与事件",
            "date_published": "2022-09-18T10:50:58.000Z",
            "content_html": "<h5 id=\"委托与事件\"><a class=\"anchor\" href=\"#委托与事件\">#</a> 委托与事件</h5>\n<h6 id=\"定义\"><a class=\"anchor\" href=\"#定义\">#</a> 定义</h6>\n<ul>\n<li>\n<p>委托：一种引用类型，表示<strong>对</strong>具有特定参数列表和返回类型的<strong>方法的引用</strong></p>\n</li>\n<li>\n<p>委托对象包含什么？</p>\n<p>方法指针：指向当前委托指向方法的内存地址<br />\n对象：委托指向方法属于哪个对象的方法，如果是静态方法，则为 null<br />\n 委托数据（委托链）：用于多播委托存放委托的引用的数组</p>\n<p><code>在实例化委托时，你可以将其实例与任何具有兼容签名和返回类型的方法相关联。你可以通过委托实例调用方法。委托用于将方法作为参数传递给其他方法。事件处理程序就是通过委托调用的方法</code></p>\n</li>\n</ul>\n<ul>\n<li>\n<p>事件：类或对象可以<strong>通过事件向其他类或对象通知发生的相关事情</strong>。发送（或引发）事件的类称为 “发布者”，接收（或处理）事件的类称为 “订阅者”。</p>\n</li>\n<li></li>\n</ul>\n<h6 id=\"参考代码\"><a class=\"anchor\" href=\"#参考代码\">#</a> 参考代码</h6>\n<h5 id=\"委托\"><a class=\"anchor\" href=\"#委托\">#</a> 委托</h5>\n<figure class=\"highlight csharp\"><figcaption data-lang=\"C#\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">DelegateDemo</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">delegate</span> <span class=\"token keyword\">void</span> 反编译委托<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> 测试<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        反编译委托 委托实例 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> 反编译委托<span class=\"token punctuation\">(</span>方法<span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        委托实例 <span class=\"token operator\">+=</span> 方法<span class=\"token number\">2</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        委托实例<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> 方法<span class=\"token function\">1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> 方法<span class=\"token function\">2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>写汉字反编译的时候更加清晰点</p>\n<p>反编译之后的代码</p>\n<p><img data-src=\".%5Cimages%5Cdelegate.jpg\" alt=\"delegate\" /></p>\n<p>委托反编译实际上是创建了一个密封类，里面有 Invoke，BeginInvoke 和 EndInvoke 方法。其中 Invoke 是同步执行委托指向的方法，BeginInvoke 和 EndInvoke 方法是异步执行。</p>\n<h5 id=\"事件\"><a class=\"anchor\" href=\"#事件\">#</a> 事件</h5>\n<p>示例代码</p>\n<figure class=\"highlight csharp\"><figcaption data-lang=\"C#\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/// &lt;summary></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">/// 事件参数</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">/// &lt;/summary></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">CustomEventArgs</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">EventArgs</span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token function\">CustomEventArgs</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span></span> message<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        Message <span class=\"token operator\">=</span> message<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">string</span></span> Message <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">set</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\">/// &lt;summary></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token comment\">/// 事件发布者</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token comment\">/// &lt;/summary></span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Publishe1r</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token comment\">// 用系统自带的泛型委托创建一个事件</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">event</span> <span class=\"token class-name\">EventHandler<span class=\"token punctuation\">&lt;</span>CustomEventArgs<span class=\"token punctuation\">></span></span> RaiseCustomEvent<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">DoSomething</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token comment\">// 引发事件</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token function\">OnRaiseCustomEvent</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">CustomEventArgs</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Event triggered\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token comment\">/// &lt;summary></span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token comment\">/// 将事件调用包装在受保护的虚拟方法中  以允许派生类重写事件调用行为</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token comment\">/// &lt;/summary></span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token comment\">/// &lt;param name=\"e\">&lt;/param></span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token keyword\">protected</span> <span class=\"token keyword\">virtual</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">OnRaiseCustomEvent</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">CustomEventArgs</span> e<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token comment\">// 如果最后一个订阅者在 null 检查之后和引发事件之前立即取消订阅，则制作事件的临时副本以避免出现竞争条件的可能性</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token class-name\">EventHandler<span class=\"token punctuation\">&lt;</span>CustomEventArgs<span class=\"token punctuation\">></span></span> raiseEvent <span class=\"token operator\">=</span> RaiseCustomEvent<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token comment\">// 没有订阅者事件将是 null</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>raiseEvent <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>            e<span class=\"token punctuation\">.</span>Message <span class=\"token operator\">+=</span> <span class=\"token interpolation-string\"><span class=\"token string\">$\" at </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span><span class=\"token expression language-csharp\">DateTime<span class=\"token punctuation\">.</span>Now</span><span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>            <span class=\"token function\">raiseEvent</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre></pre></td></tr><tr><td data-num=\"43\"></td><td><pre><span class=\"token comment\">/// &lt;summary></span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre><span class=\"token comment\">/// 事件订阅者</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre><span class=\"token comment\">/// &lt;/summary></span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Subscriber</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">readonly</span> <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> _id<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token function\">Subscriber</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span></span> id<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Publisher</span> pub<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>        _id <span class=\"token operator\">=</span> id<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>        <span class=\"token comment\">// 订阅事件</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>        pub<span class=\"token punctuation\">.</span>RaiseCustomEvent <span class=\"token operator\">+=</span> HandleCustomEvent<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>    <span class=\"token comment\">// 定义引发事件时要采取的操作 </span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>    <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">HandleCustomEvent</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">object</span></span> sender<span class=\"token punctuation\">,</span> <span class=\"token class-name\">CustomEventArgs</span> e<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>        <span class=\"token keyword\">try</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>_id <span class=\"token operator\">==</span> <span class=\"token string\">\"sub1\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>                <span class=\"token comment\">//  try catch 后  事件抛出异常了 也不会影响下面的订阅者继续执行 </span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>                <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Exception</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"sub1 exceptoin\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>            Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token interpolation-string\"><span class=\"token string\">$\"</span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span><span class=\"token expression language-csharp\">_id</span><span class=\"token punctuation\">&#125;</span></span><span class=\"token string\"> received this message: </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span><span class=\"token expression language-csharp\">e<span class=\"token punctuation\">.</span>Message</span><span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>        <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> ex<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>            Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span>ex<span class=\"token punctuation\">.</span>Message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>事件当中有三个角色，事件参数，事件发布者，事件订阅者，发布者和订阅者通过委托进行沟通</p>\n<p>事件发布者 PublisherIL 反编译如下图所示：</p>\n<p><img data-src=\".%5Cimages%5Cevent.jpg\" alt=\"delegate\" /></p>\n<p>IL 代码中可以看到 event 事件也是编译成类，另外生成了一个<strong>私有委托字段</strong>，还有两个方法，add_RiseCustomEvent 和 remove_RiseCustomEvent</p>\n<p>补充：</p>\n<p><code>事实上事件其实是对委托的一种包装，事件包含add和remove两个方法，其本质是对委托的Combine和Remove两个方法</code></p>\n<p><code>委托可以作为一种约束条件来约束事件</code></p>\n<ul>\n<li>事件的触发是能用事件的发布者来操作，在事件发布者的外部不能调用 Invoke 方法主动触发事件</li>\n</ul>\n<p><code>为什么要用委托来声明事件？</code></p>\n<ul>\n<li>事件与委托正如字段与属性一样，用属性将字段进行封装，属性的 get/set 方法约束字段是否可以被外部设置和获取字段值，同样事件也是一样，事件封装了委托内部的 Invoke 方法，防止外部主动执行委托，而是只能由事件的发布者触发</li>\n</ul>\n<h5 id=\"总结\"><a class=\"anchor\" href=\"#总结\">#</a> 总结</h5>\n<h6 id=\"委托的作用\"><a class=\"anchor\" href=\"#委托的作用\">#</a> 委托的作用</h6>\n<ul>\n<li>委托可以用于调用方法</li>\n<li>委托用于将方法作为参数传递给其他方法</li>\n<li>委托可以作为一种约束，限制方法的调用 (也就是事件)</li>\n</ul>\n<h6 id=\"委托与事件的区别\"><a class=\"anchor\" href=\"#委托与事件的区别\">#</a> 委托与事件的区别</h6>\n<ul>\n<li>事件只能在方法的外部进行声明，而委托在方法的外部和内部都可以进行声明</li>\n<li>事件只能在类的内部进行触发，不能在类的外部进行触发。而委托在类的内部和外部都可触发；</li>\n<li>委托一般用于回调，而事件一般用于外部接口。在观察者模式中，被观察者可在内部声明一个事件作为外部观察者注册的接口</li>\n</ul>\n<p>参考连接</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly96aHVhbmxhbi56aGlodS5jb20vcC8xNDYzNDEwNzM=\">知乎链接参考</span></p>\n",
            "tags": [
                "C#基础",
                "C#基础"
            ]
        },
        {
            "id": "http://www.chlneter.com/%E6%B3%9B%E5%9E%8B/",
            "url": "http://www.chlneter.com/%E6%B3%9B%E5%9E%8B/",
            "title": "泛型",
            "date_published": "2022-09-18T10:36:40.000Z",
            "content_html": "<h4 id=\"泛型\"><a class=\"anchor\" href=\"#泛型\">#</a> 泛型</h4>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWFybi5taWNyb3NvZnQuY29tL3poLWNuL2RvdG5ldC9jc2hhcnAvcHJvZ3JhbW1pbmctZ3VpZGUvZ2VuZXJpY3MvZ2VuZXJpYy10eXBlLXBhcmFtZXRlcnM=\">官方文档</span></p>\n<h5 id=\"定义\"><a class=\"anchor\" href=\"#定义\">#</a> 定义</h5>\n<ul>\n<li>\n<p>泛型是为所存储或使用的一个或多个类型具有占位符（类型形参）的类、结构、接口和方法，相当于一个” 模板 “。</p>\n</li>\n<li>\n<p>T：代表<strong>类型参数</strong>，指在创建泛型类型的实例时指定的特定类型<strong>占位符</strong>。</p>\n</li>\n<li>\n<p>在初始化这种类或者方法之前，这些类或者方法会<strong>延迟</strong>指定一个或者多个类型，在其他类中使用泛型，而不会产生运行时的转换或装箱操作的风险。</p>\n</li>\n</ul>\n<h5 id=\"优点\"><a class=\"anchor\" href=\"#优点\">#</a> 优点</h5>\n<ul>\n<li>可重用性提高（无需从基类型继承，无需重写成员），类型安全（编译时强制判断数据类型），提高性能\t（更好的存储和操作值类型，避免装箱操作的成本）</li>\n<li>可以创建自己的泛型接口、泛型类、泛型方法、泛型事件和泛型委托</li>\n<li>可以对泛型类进行约束以访问特定数据类型的方法</li>\n<li>在泛型数据类型中所用类型的信息可在运行时通过使用反射来获取 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWFybi5taWNyb3NvZnQuY29tL3poLWNuL2RvdG5ldC9mcmFtZXdvcmsvcmVmbGVjdGlvbi1hbmQtY29kZWRvbS9ob3ctdG8tZGVmaW5lLWFuZC1leGVjdXRlLWR5bmFtaWMtbWV0aG9kcw==\">动态方法</span></li>\n</ul>\n<h5 id=\"缺点\"><a class=\"anchor\" href=\"#缺点\">#</a> 缺点</h5>\n<ul>\n<li>NET 不支持上下文绑定的泛型类型</li>\n<li>枚举不能具有泛型类型形参</li>\n<li>轻量动态方法不能是泛型</li>\n<li>包含在泛型类型中的嵌套类型不能被实例化</li>\n</ul>\n<h5 id=\"协变与逆变\"><a class=\"anchor\" href=\"#协变与逆变\">#</a> 协变与逆变</h5>\n<ul>\n<li>协变：关键字 out，只能用作方法的返回值类型，能够使用比原始指定的派生类型的派生程度更大（更具体的）的类型（如：string-&gt;object （子类到父类的转换））</li>\n<li>逆变：关键字 in，智能用工作方法的入参类型。能够使用比原始指定的派生类型的派生程度更小（不太具体的）的类型（object-&gt;string （父类到子类的转换））</li>\n</ul>\n<p><code>协变逆变中的协逆是相对于继承关系的继承链方向而言的，在面向对象中父类和子类有一个关系，子类可以向上转为基类，但是基类不能向下转为子类。</code></p>\n<h5 id=\"funct-与-actiont\"><a class=\"anchor\" href=\"#funct-与-actiont\">#</a> Func&lt;T&gt; 与 Action&lt;T&gt;</h5>\n<ul>\n<li>Func&lt;T&gt;</li>\n</ul>\n<p>只有输出，出参只有协变，返回结果只能返回 T 类的父类，例如 object a = object (string)，这肯定是不行的。</p>\n<pre><code class=\"language-c#\">public delegate TResult Func&lt;out TResult&gt;();\n</code></pre>\n<ul>\n<li>Action&lt;T&gt;</li>\n</ul>\n<p>只有输入，入参只有逆变，入参只能是 T 类及 T 类的子类，原因是不能把父类当做子类来使用。</p>\n<pre><code class=\"language-C#\">public delegate void Action&lt;in T&gt;(T obj);\n</code></pre>\n<h5 id=\"泛型约束\"><a class=\"anchor\" href=\"#泛型约束\">#</a> 泛型约束</h5>\n<ul>\n<li><code>where T : class</code> ，类型参数必须是引用类型。</li>\n<li><code>where T : new()</code> ，类型参数必须具有公共无参数构造函数。</li>\n<li><code>where T : U</code> ，T 必须是 U 类型或者 U 的派生类。</li>\n<li><code>where T :</code> &lt;基类名&gt;，类型参数必须是指定的基类或派生自指定的基类。在 C# 8.0 及更高版本中的可为 null 上下文中， <code>T</code>  必须是从指定基类派生的不可为 null 的引用类型。</li>\n<li><code>where T :</code> &lt;基类名&gt;?，类型参数必须是指定的基类或派生自指定的基类，在 C# 8.0 及更高版本中的可为 null 上下文中， <code>T</code>  可以是从指定基类派生的可为 null 或不可为 null 的类型。</li>\n<li><code>where T :</code> &lt;接口名称&gt;，类型参数必须是指定的接口或实现指定的接口。 可指定多个接口约束。 约束接口也可以是泛型。 在 C# 8.0 及更高版本中的可为 null 上下文中， <code>T</code>  必须是实现指定接口的不可为 null 的类型。</li>\n<li><code>where T :</code> &lt;接口名称&gt;?，类型参数必须是指定的接口或实现指定的接口。 可指定多个接口约束。 约束接口也可以是泛型。 在 C# 8.0 中的可为 null 上下文中， <code>T</code>  可以是可为 null 的引用类型、不可为 null 的引用类型或值类型。  <code>T</code>  不能是可为 null 的值类型。</li>\n<li><code>where T : struct</code> ，类型参数必须是不可为 null 的值类型。</li>\n<li><code>where T : class?</code> ，类型参数必须是可为 null 或不可为 null 的引用类型。</li>\n<li><code>where T : notnull</code> ，类型参数必须是不可为 null 的类型。</li>\n<li><code>where T : default</code> ，重写方法或提供显式接口实现时，如果需要指定不受约束的类型参数，此约束可解决歧义。</li>\n<li><code>where T : unmanaged</code> ，类型参数必须是不可为 null 的非托管类型。</li>\n</ul>\n<p><code>后续补充中...</code></p>\n",
            "tags": [
                "C#基础",
                "C#基础"
            ]
        },
        {
            "id": "http://www.chlneter.com/%E5%B0%81%E8%A3%85%E7%BB%A7%E6%89%BF%E5%A4%9A%E6%80%81/",
            "url": "http://www.chlneter.com/%E5%B0%81%E8%A3%85%E7%BB%A7%E6%89%BF%E5%A4%9A%E6%80%81/",
            "title": "封装继承多态",
            "date_published": "2022-09-18T10:12:31.000Z",
            "content_html": "<h5 id=\"封装继承多态\"><a class=\"anchor\" href=\"#封装继承多态\">#</a> 封装继承多态</h5>\n<ul>\n<li>封装：将具体的事物抽象成类，隐藏类的具体细节，明确外部使用的方法和数据项；</li>\n<li>继承：对象与对象之间，接口与接口之间的对应关系，基类与派生类之间的关系，实现复用的目的</li>\n<li>多态：对于同一操作作用于不同的对象，可以有不同的解释，产生不同的执行效果；同一个行为具有多个不同表现形式；</li>\n</ul>\n<h6 id=\"封装\"><a class=\"anchor\" href=\"#封装\">#</a> 封装</h6>\n<ul>\n<li>四个访问修饰符 public protected private internal</li>\n</ul>\n<h6 id=\"继承\"><a class=\"anchor\" href=\"#继承\">#</a> 继承</h6>\n<ul>\n<li>分为单一继承，多级继承</li>\n</ul>\n<h6 id=\"多态\"><a class=\"anchor\" href=\"#多态\">#</a> 多态</h6>\n<ul>\n<li>体现为虚方法，函数的重载，抽象，接口之间的继承关系</li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWFybi5taWNyb3NvZnQuY29tL3poLWNuL2RvdG5ldC9jc2hhcnAvZnVuZGFtZW50YWxzL29iamVjdC1vcmllbnRlZC9wb2x5bW9ycGhpc20=\">多态性官方文档</span></li>\n</ul>\n",
            "tags": [
                "C#基础",
                "C#基础"
            ]
        },
        {
            "id": "http://www.chlneter.com/%E6%8E%A5%E5%8F%A3%E4%B8%8E%E6%8A%BD%E8%B1%A1%E7%B1%BB/",
            "url": "http://www.chlneter.com/%E6%8E%A5%E5%8F%A3%E4%B8%8E%E6%8A%BD%E8%B1%A1%E7%B1%BB/",
            "title": "接口与抽象类",
            "date_published": "2022-09-18T07:57:04.000Z",
            "content_html": "<h5 id=\"接口与抽象类\"><a class=\"anchor\" href=\"#接口与抽象类\">#</a> 接口与抽象类</h5>\n<ul>\n<li>\n<p>用途</p>\n<ul>\n<li>抽象类：是一个能够给多个派生类共享的通用的基类。定义共性，是什么。</li>\n<li>接口：提供了派生类遵循的通用基类。定义一种行为规范，能做什么。</li>\n</ul>\n</li>\n<li>\n<p>特征</p>\n<ul>\n<li>抽象类：\n<ul>\n<li>是特殊的类，不能被实例化（除了通过实例化继承抽象类来获取抽象类中的成员之外）；</li>\n<li>可以定义抽象方法，但是不能实现；</li>\n<li>继承抽象类的类必须把里面的抽象成员全部重写，抽象类除外。</li>\n<li>抽象类中可以包含的成员包括：方法，属性，索引器，事件，字段</li>\n</ul>\n</li>\n<li>接口：\n<ul>\n<li>不能被实例化；</li>\n<li>接口可以被多继承及实现；</li>\n<li>接口中不能包含实例字段、构造函数、终结器；</li>\n<li>正常情况下接口是公共的 public</li>\n<li>接口中可以包括的成员：方法，属性，索引器</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>对比</p>\n<ul>\n<li>相同点\n<ul>\n<li>都不能实例化</li>\n<li>都可以被继承</li>\n<li>都可以包含方法声明</li>\n<li>派生类必须实现未实现的方法</li>\n</ul>\n</li>\n<li>不同点\n<ul>\n<li>抽象类只能单继承，接口可以多实现；</li>\n<li>抽象类中可以有构造方法，接口中不能有；</li>\n<li>接口中不能包含字段，抽象类中可以；</li>\n<li>接口用 interface，抽象类用 abstract 定义；</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>使用场景</p>\n<ul>\n<li>接口：如果对象关系不密切，但是若干的功能具有共同的声明，则用接口，提供单一的功能；</li>\n<li>抽象类：对象存在多个关系密切的版本，使用抽象类，提供丰富功能的场合；</li>\n</ul>\n</li>\n</ul>\n<pre><code class=\"language-html\"></code></pre>\n",
            "tags": [
                "C#基础",
                "C#基础"
            ]
        },
        {
            "id": "http://www.chlneter.com/CSharp%E4%B8%AD%E7%9A%84%E5%AD%97%E5%85%B8/",
            "url": "http://www.chlneter.com/CSharp%E4%B8%AD%E7%9A%84%E5%AD%97%E5%85%B8/",
            "title": "CSharp中的字典",
            "date_published": "2022-09-18T04:30:45.000Z",
            "content_html": "<h5 id=\"diciotnary\"><a class=\"anchor\" href=\"#diciotnary\">#</a> Diciotnary</h5>\n<figure class=\"highlight csharp\"><figcaption data-lang=\"C#\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Dictionary<span class=\"token punctuation\">&lt;</span>Tkey<span class=\"token punctuation\">,</span> TValue<span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">private</span> <span class=\"token class-name\"><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> buckets<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">private</span> <span class=\"token class-name\">Entry<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> entries<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">private</span> <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> count<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">private</span> <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> version<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">private</span> <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> freeList<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">private</span> <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> freeCount<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">private</span> <span class=\"token class-name\">IEqualityComparer<span class=\"token punctuation\">&lt;</span>Tkey<span class=\"token punctuation\">></span></span> comparer<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token function\">Dictionary</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>comparer <span class=\"token operator\">=</span> EqualityComparer<span class=\"token operator\">&lt;</span>Tkey<span class=\"token operator\">></span><span class=\"token punctuation\">.</span>Default<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token keyword\">private</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">Entry</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            <span class=\"token keyword\">public</span> <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> hashCode<span class=\"token punctuation\">;</span><span class=\"token comment\">// 计算的 hashCode</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            <span class=\"token keyword\">public</span> <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> next<span class=\"token punctuation\">;</span><span class=\"token comment\">// 指向下一个 entry 的指针</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            <span class=\"token keyword\">public</span> <span class=\"token class-name\">Tkey</span> key<span class=\"token punctuation\">;</span><span class=\"token comment\">// key</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            <span class=\"token keyword\">public</span> <span class=\"token class-name\">TValue</span> <span class=\"token keyword\">value</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// value</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Insert</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Tkey</span> key<span class=\"token punctuation\">,</span> <span class=\"token class-name\">TValue</span> <span class=\"token keyword\">value</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>buckets <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token function\">Initialize</span><span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 初始化</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>            <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> hashCode <span class=\"token operator\">=</span> comparer<span class=\"token punctuation\">.</span><span class=\"token function\">GetHashCode</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> <span class=\"token number\">0x7FFFFFFF</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 计算 hashCode</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>            <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> targetBucket <span class=\"token operator\">=</span> hashCode <span class=\"token operator\">%</span> buckets<span class=\"token punctuation\">.</span>Length<span class=\"token punctuation\">;</span><span class=\"token comment\">// 计算碰撞桶的坐标</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>            <span class=\"token comment\">// 查看桶的值，循环</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">int</span></span> i <span class=\"token operator\">=</span> buckets<span class=\"token punctuation\">[</span>targetBucket<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">>=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">=</span> entries<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"34\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>                <span class=\"token comment\">// 判断插入的 key 和 value 都相同就覆盖原来的值</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>entries<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>hashCode <span class=\"token operator\">==</span> hashCode <span class=\"token operator\">&amp;&amp;</span> comparer<span class=\"token punctuation\">.</span><span class=\"token function\">Equals</span><span class=\"token punctuation\">(</span>entries<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>key<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>                <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>                    entries<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">value</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">value</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>                    version<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>                    <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>               </pre></td></tr><tr><td data-num=\"44\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>            <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> index<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>            <span class=\"token comment\">// 有多少个被删除的 Entry，有多少个空闲的位置</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>freeCount <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"48\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>                index <span class=\"token operator\">=</span> freeList<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>                freeList <span class=\"token operator\">=</span> entries<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>                freeCount<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>            <span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>                <span class=\"token comment\">//count 当前 entries 的 index 位置，就是到达了 entry 最后的一个位置 空间不够了</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>count <span class=\"token operator\">==</span> entries<span class=\"token punctuation\">.</span>Length<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>                <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>                    <span class=\"token comment\">// 扩容操作</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>                    <span class=\"token function\">Resize</span><span class=\"token punctuation\">(</span><span class=\"token number\">17</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 7 是通过内部函数重新找刀合适 Capcity</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>                    targetBucket <span class=\"token operator\">=</span> hashCode <span class=\"token operator\">%</span> buckets<span class=\"token punctuation\">.</span>Length<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>                index <span class=\"token operator\">=</span> count<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>                count<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>            entries<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>hashCode <span class=\"token operator\">=</span> hashCode<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>            <span class=\"token comment\">// 将当前 entry 的 next 指向上一个存储的 entry 的下标</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>            entries<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> buckets<span class=\"token punctuation\">[</span>targetBucket<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>            entries<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>key <span class=\"token operator\">=</span> key<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>            entries<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">value</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">value</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"71\"></td><td><pre>            <span class=\"token comment\">// 将桶的值赋值为当前 entry 的下标。说白了就是让当前桶槽指向当前的 entry</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>            buckets<span class=\"token punctuation\">[</span>targetBucket<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> index<span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"73\"></td><td><pre>            version<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>        <span class=\"token keyword\">private</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Initialize</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">int</span></span> capacity<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>            <span class=\"token comment\">// 初始化桶的长度，源码是找到 离 capacity 最小的素数（也就是质数）</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>            buckets <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\"><span class=\"token keyword\">int</span></span><span class=\"token punctuation\">[</span><span class=\"token number\">7</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>            <span class=\"token comment\">// 桶里面的值全设置为 - 1</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">int</span></span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> buckets<span class=\"token punctuation\">.</span>Length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> buckets<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"82\"></td><td><pre>            <span class=\"token comment\">// 初始化 entry 的长度</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>            entries <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Entry</span><span class=\"token punctuation\">[</span><span class=\"token number\">7</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>            <span class=\"token comment\">// 被删除 Entry 在 entries 中的下标 index，这个位置是空闲的</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>            freeList <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">bool</span></span> <span class=\"token function\">TryGetValue</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Tkey</span> key<span class=\"token punctuation\">,</span> <span class=\"token keyword\">out</span> <span class=\"token class-name\">TValue</span> <span class=\"token keyword\">value</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>            <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> i <span class=\"token operator\">=</span> <span class=\"token function\">FindEntry</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">>=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre>                <span class=\"token keyword\">value</span> <span class=\"token operator\">=</span> entries<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">value</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre>                <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"96\"></td><td><pre>            <span class=\"token keyword\">value</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">default</span><span class=\"token punctuation\">(</span><span class=\"token type-expression class-name\">TValue</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"99\"></td><td><pre></pre></td></tr><tr><td data-num=\"100\"></td><td><pre>        <span class=\"token keyword\">private</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">int</span></span> <span class=\"token function\">FindEntry</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Tkey</span> key<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"101\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"102\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>buckets <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"103\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"104\"></td><td><pre>                <span class=\"token comment\">// 计算 hashCode</span></pre></td></tr><tr><td data-num=\"105\"></td><td><pre>                <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> hashCode <span class=\"token operator\">=</span> comparer<span class=\"token punctuation\">.</span><span class=\"token function\">GetHashCode</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> <span class=\"token number\">0x7FFFFFFF</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"106\"></td><td><pre>                <span class=\"token comment\">// 根据碰撞刀桶的值进行循环</span></pre></td></tr><tr><td data-num=\"107\"></td><td><pre>                <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">int</span></span> i <span class=\"token operator\">=</span> buckets<span class=\"token punctuation\">[</span>hashCode <span class=\"token operator\">%</span> buckets<span class=\"token punctuation\">.</span>Length<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">>=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">=</span> entries<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"108\"></td><td><pre>                <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"109\"></td><td><pre>                    <span class=\"token comment\">// 如果取值的 key 和 hashcode 和 entry 的 key 还有 hashCode 都相同，返回 entry 的索引</span></pre></td></tr><tr><td data-num=\"110\"></td><td><pre>                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>entries<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>hashCode <span class=\"token operator\">==</span> hashCode <span class=\"token operator\">&amp;&amp;</span> comparer<span class=\"token punctuation\">.</span><span class=\"token function\">Equals</span><span class=\"token punctuation\">(</span>entries<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>key<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> i<span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"111\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"112\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"113\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"114\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"115\"></td><td><pre></pre></td></tr><tr><td data-num=\"116\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">bool</span></span> <span class=\"token function\">Remove</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Tkey</span> key<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"117\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"118\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>buckets <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"119\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"120\"></td><td><pre>                <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> hashCode <span class=\"token operator\">=</span> comparer<span class=\"token punctuation\">.</span><span class=\"token function\">GetHashCode</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> <span class=\"token number\">0x7FFFFFFF</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"121\"></td><td><pre>                <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> bucket <span class=\"token operator\">=</span> hashCode <span class=\"token operator\">%</span> buckets<span class=\"token punctuation\">.</span>Length<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"122\"></td><td><pre>                <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> last <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"123\"></td><td><pre>                <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">int</span></span> i <span class=\"token operator\">=</span> buckets<span class=\"token punctuation\">[</span>bucket<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">>=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> last <span class=\"token operator\">=</span> i<span class=\"token punctuation\">,</span> i <span class=\"token operator\">=</span> entries<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"124\"></td><td><pre>                <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"125\"></td><td><pre>                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>entries<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>hashCode <span class=\"token operator\">==</span> hashCode <span class=\"token operator\">&amp;&amp;</span> comparer<span class=\"token punctuation\">.</span><span class=\"token function\">Equals</span><span class=\"token punctuation\">(</span>entries<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>key<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"126\"></td><td><pre>                    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"127\"></td><td><pre>                        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>last <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"128\"></td><td><pre>                        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"129\"></td><td><pre>                            <span class=\"token comment\">// 当删除最后一个 entry 时，当前槽的值设置为 - 1</span></pre></td></tr><tr><td data-num=\"130\"></td><td><pre>                            buckets<span class=\"token punctuation\">[</span>bucket<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> entries<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"131\"></td><td><pre>                        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"132\"></td><td><pre>                        <span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"133\"></td><td><pre>                        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"134\"></td><td><pre>                            <span class=\"token comment\">// 将要删除的 entry 指向的下标赋值给下一个 entry 的下</span></pre></td></tr><tr><td data-num=\"135\"></td><td><pre>                            entries<span class=\"token punctuation\">[</span>last<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> entries<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span> 标</pre></td></tr><tr><td data-num=\"136\"></td><td><pre>                        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"137\"></td><td><pre>                        entries<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>hashCode <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"138\"></td><td><pre>                        entries<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> freeList<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"139\"></td><td><pre>                        entries<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>key <span class=\"token operator\">=</span> <span class=\"token keyword\">default</span><span class=\"token punctuation\">(</span><span class=\"token type-expression class-name\">Tkey</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"140\"></td><td><pre>                        entries<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">value</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">default</span><span class=\"token punctuation\">(</span><span class=\"token type-expression class-name\">TValue</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"141\"></td><td><pre>                        freeList <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"142\"></td><td><pre>                        freeCount<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"143\"></td><td><pre>                        version<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"144\"></td><td><pre>                        <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"145\"></td><td><pre>                    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"146\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"147\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"148\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"149\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"150\"></td><td><pre></pre></td></tr><tr><td data-num=\"151\"></td><td><pre>        <span class=\"token comment\">/// &lt;summary></span></pre></td></tr><tr><td data-num=\"152\"></td><td><pre>        <span class=\"token comment\">/// 扩容</span></pre></td></tr><tr><td data-num=\"153\"></td><td><pre>        <span class=\"token comment\">/// &lt;/summary></span></pre></td></tr><tr><td data-num=\"154\"></td><td><pre>        <span class=\"token comment\">/// &lt;param name=\"newSize\">&lt;/param></span></pre></td></tr><tr><td data-num=\"155\"></td><td><pre>        <span class=\"token comment\">/// &lt;param name=\"forceNewHashCodes\">&lt;/param></span></pre></td></tr><tr><td data-num=\"156\"></td><td><pre>        <span class=\"token keyword\">private</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Resize</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">int</span></span> newSize<span class=\"token punctuation\">,</span> <span class=\"token class-name\"><span class=\"token keyword\">bool</span></span> forceNewHashCodes<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"157\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"158\"></td><td><pre>            Contract<span class=\"token punctuation\">.</span><span class=\"token function\">Assert</span><span class=\"token punctuation\">(</span>newSize <span class=\"token operator\">>=</span> entries<span class=\"token punctuation\">.</span>Length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"159\"></td><td><pre>            <span class=\"token class-name\"><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> newBuckets <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\"><span class=\"token keyword\">int</span></span><span class=\"token punctuation\">[</span>newSize<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"160\"></td><td><pre>            <span class=\"token comment\">//1. 初始化新的 buckets</span></pre></td></tr><tr><td data-num=\"161\"></td><td><pre>            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">int</span></span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> newBuckets<span class=\"token punctuation\">.</span>Length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> newBuckets<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"162\"></td><td><pre>            <span class=\"token comment\">//2. 初始化新的 entrys</span></pre></td></tr><tr><td data-num=\"163\"></td><td><pre>            <span class=\"token class-name\">Entry<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> newEntries <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Entry</span><span class=\"token punctuation\">[</span>newSize<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"164\"></td><td><pre>            <span class=\"token comment\">//3. 将原来的 entrys 复制给新的 entry</span></pre></td></tr><tr><td data-num=\"165\"></td><td><pre>            Array<span class=\"token punctuation\">.</span><span class=\"token function\">Copy</span><span class=\"token punctuation\">(</span>entries<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> newEntries<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"166\"></td><td><pre>            <span class=\"token comment\">//4. 是否重新计算 hashCode</span></pre></td></tr><tr><td data-num=\"167\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>forceNewHashCodes<span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"168\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"169\"></td><td><pre>                <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">int</span></span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> count<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"170\"></td><td><pre>                <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"171\"></td><td><pre>                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>newEntries<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>hashCode <span class=\"token operator\">!=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"172\"></td><td><pre>                    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"173\"></td><td><pre>                        newEntries<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>hashCode <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>comparer<span class=\"token punctuation\">.</span><span class=\"token function\">GetHashCode</span><span class=\"token punctuation\">(</span>newEntries<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>key<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> <span class=\"token number\">0x7FFFFFFF</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"174\"></td><td><pre>                    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"175\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"176\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"177\"></td><td><pre>            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">int</span></span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> count<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"178\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"179\"></td><td><pre>                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>newEntries<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>hashCode <span class=\"token operator\">>=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"180\"></td><td><pre>                <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"181\"></td><td><pre>                    <span class=\"token comment\">//5. 重新计算每个 entry 对应的桶槽</span></pre></td></tr><tr><td data-num=\"182\"></td><td><pre>                    <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> bucket <span class=\"token operator\">=</span> newEntries<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>hashCode <span class=\"token operator\">%</span> newSize<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"183\"></td><td><pre>                    newEntries<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> newBuckets<span class=\"token punctuation\">[</span>bucket<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"184\"></td><td><pre>                    newBuckets<span class=\"token punctuation\">[</span>bucket<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"185\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"186\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"187\"></td><td><pre>            buckets <span class=\"token operator\">=</span> newBuckets<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"188\"></td><td><pre>            entries <span class=\"token operator\">=</span> newEntries<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"189\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"190\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li>测试修改</li>\n</ul>\n",
            "tags": [
                "基础数据结构",
                "Dictionary"
            ]
        },
        {
            "id": "http://www.chlneter.com/%E5%90%8C%E6%AD%A5%E7%B4%A2%E5%BC%95%E5%9D%97/",
            "url": "http://www.chlneter.com/%E5%90%8C%E6%AD%A5%E7%B4%A2%E5%BC%95%E5%9D%97/",
            "title": "同步索引块",
            "date_published": "2022-09-18T04:20:25.000Z",
            "content_html": "<h4 id=\"同步块索引-synclockindex\"><a class=\"anchor\" href=\"#同步块索引-synclockindex\">#</a> 同步块索引 SyncLockIndex</h4>\n<ul>\n<li>顾名思义，和同步有关，.Net 框架再设计的时候考虑到线程同步的问题，CLR 采用了一种折中的办法，就是实际只为每个堆内对象分配一个同步索引，该索引中只保存一个表明数组内索引的整数。CLR 在加载时会新建一个同步块数组，当某个对象需要被同步时，CLR 会为其分配一个同步块，并且把该同步块在同步块数组中的索引加入该对象的同步块索引中。</li>\n<li>同步块是指 CLR 维护的同步块数组中的某个元素，负责提供线程同步的操作，当某个线程拥有了某个同步块时，其他线程就在试图访问该同步块时进入等待状态。同步索引是每个堆内对象都会分配的一个字段</li>\n</ul>\n<h5 id=\"作用\"><a class=\"anchor\" href=\"#作用\">#</a> 作用</h5>\n<ul>\n<li>Lock</li>\n<li>GetHashCode</li>\n</ul>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY25ibG9ncy5jb20veXV5aWpxL2FyY2hpdmUvMjAwOS8wMy8xMy8xNDEwMDcxLmh0bWw=\">参考链接</span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vaG9tZXp6bS9wLzE0NTMxNzA2Lmh0bWw=\">同步块和同步块索引</span></p>\n",
            "tags": [
                "C#基础",
                "C#基础"
            ]
        },
        {
            "id": "http://www.chlneter.com/%E8%A3%85%E7%AE%B1%E4%B8%8E%E6%8B%86%E7%AE%B1/",
            "url": "http://www.chlneter.com/%E8%A3%85%E7%AE%B1%E4%B8%8E%E6%8B%86%E7%AE%B1/",
            "title": "装箱与拆箱",
            "date_published": "2022-09-18T03:42:36.000Z",
            "content_html": "<h5 id=\"定义\"><a class=\"anchor\" href=\"#定义\">#</a> 定义</h5>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>装箱是将值类型转换为 object 类型或由此值类型实现的任何接口类型的过程</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>拆箱取消装箱将从对象中提取值类型</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>装箱是隐式的；取消装箱是显式的</pre></td></tr></table></figure><h5 id=\"装箱与拆箱内部过程\"><a class=\"anchor\" href=\"#装箱与拆箱内部过程\">#</a> 装箱与拆箱内部过程</h5>\n<ul>\n<li>装箱\n<ul>\n<li>从托管堆中分配新创建的对象的内存 (值类型实际的大小 + 方法表指针 + SyncBlockIndex)</li>\n<li>将值类型的值拷贝分配到的内存中</li>\n<li>返回托管堆的新分配对象的地址</li>\n</ul>\n</li>\n<li>拆箱\n<ul>\n<li>首先获取托管堆中属于值类型那部分字段的地址，这一步是严格意义上的拆箱</li>\n<li>将引用对象中的值拷贝到位于线程堆栈上的值类型实例中</li>\n</ul>\n</li>\n</ul>\n<h5 id=\"官方文档描述\"><a class=\"anchor\" href=\"#官方文档描述\">#</a> 官方文档描述</h5>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>数据类型被分隔为值类型和引用类型。 值类型要么是堆栈分配，要么在结构中以内联方式分配。 引用类型为堆分配。 引用类型和值类型均派生自最终基类 Object 。 如果需要值类型的行为与对象类似，则会在堆上分配值类型类似于引用对象的包装，并将值类型的值复制到其中。 包装已标记，因此系统知道它包含值类型。 此过程称为装箱，相反的过程称为取消装箱。 装箱和取消装箱允许任何类型被视为对象</pre></td></tr></table></figure><h5 id=\"使用场景\"><a class=\"anchor\" href=\"#使用场景\">#</a> 使用场景</h5>\n<ul>\n<li>调用一个含类型为 Object 的参数的方法，该 Object 可支持任意为型，以便通用，当你需要将一个值类型 (如 Int32) 传入时，需要装箱</li>\n<li>另一种用法是，一个非泛型的容器，同样是为了保证通用，而将元素类型定义为 Object。于是，要将值类型数据加入容器时，需要装箱</li>\n</ul>\n",
            "tags": [
                "C#基础",
                "C#基础"
            ]
        },
        {
            "id": "http://www.chlneter.com/%E8%99%9A%E6%8B%9F%E5%8C%96/",
            "url": "http://www.chlneter.com/%E8%99%9A%E6%8B%9F%E5%8C%96/",
            "title": "虚拟化",
            "date_published": "2022-09-17T09:33:15.000Z",
            "content_html": "<h4 id=\"虚拟化\"><a class=\"anchor\" href=\"#虚拟化\">#</a> 虚拟化</h4>\n<ul>\n<li>是指通过虚拟化技术将一台计算机虚拟化为多台逻辑计算机（对计算机的物力资源的抽象，实现资源的模拟，隔离和共享）</li>\n</ul>\n<h4 id=\"虚拟化的分类\"><a class=\"anchor\" href=\"#虚拟化的分类\">#</a> 虚拟化的分类</h4>\n<ul>\n<li>\n<p>基于平台的虚拟化</p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>x86或者x64位的操作系统中的CPU、内存、外设等作为资源，这种对应的虚拟化技术就是平台虚拟化。</pre></td></tr></table></figure></li>\n<li>\n<p>基于操作系统的虚拟化</p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>如果把操作系统及其提供的系统调用作为资源，那虚拟化就表现为操作系统虚拟化</pre></td></tr></table></figure></li>\n</ul>\n<h4 id=\"虚拟化管理程序\"><a class=\"anchor\" href=\"#虚拟化管理程序\">#</a> 虚拟化管理程序</h4>\n<ul>\n<li>\n<p>Hypervisor（VMM）</p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>一种运行在物理服务器和操作系统之间的中间软件层，可允许多个操作系统和应用共享硬件，也称VMM（Virtual Machine Monitor），即虚拟机监视器。</pre></td></tr></table></figure></li>\n<li>\n<p>虚拟化类型：半虚拟化、硬件辅助全虚拟化、软件全虚拟化。</p>\n</li>\n<li>\n<p>ESXI: 硬件辅助的虚拟化，只是对 CPU 进行修改，网络和存储仍然没有，此时可以用支持虚拟化的网卡，也可以对网卡和存储使用半虚拟化驱动程序，对操作系统没有要求。</p>\n</li>\n</ul>\n<h5 id=\"container和普通虚拟机image相比最大的区别就是它并不包含操作系统内核\"><a class=\"anchor\" href=\"#container和普通虚拟机image相比最大的区别就是它并不包含操作系统内核\">#</a> Container 和普通虚拟机 Image 相比最大的区别就是它并不包含操作系统内核</h5>\n",
            "tags": [
                "虚拟化"
            ]
        }
    ]
}